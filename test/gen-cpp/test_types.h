/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _RequstInfo__isset {
  _RequstInfo__isset() : uid(false), name(false) {}
  bool uid;
  bool name;
} _RequstInfo__isset;

class RequstInfo {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  RequstInfo() : uid(0), name("") {
  }

  virtual ~RequstInfo() throw() {}

  int64_t uid;
  std::string name;

  _RequstInfo__isset __isset;

  bool operator == (const RequstInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const RequstInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequstInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ResponseInfo__isset {
  _ResponseInfo__isset() : uid(false), res_code(false) {}
  bool uid;
  bool res_code;
} _ResponseInfo__isset;

class ResponseInfo {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  ResponseInfo() : uid(0), res_code(0) {
  }

  virtual ~ResponseInfo() throw() {}

  int64_t uid;
  int32_t res_code;

  _ResponseInfo__isset __isset;

  bool operator == (const ResponseInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(res_code == rhs.res_code))
      return false;
    return true;
  }
  bool operator != (const ResponseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResponseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
